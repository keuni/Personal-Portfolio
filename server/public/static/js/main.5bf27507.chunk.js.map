{"version":3,"sources":["Appmain/Home.js","Appmain/Aboutme.js","Appmain/Portfolio.js","Menu.js","Nav.js","Message.js","Footer.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Aboutme","Portfolio","Menu","props","to","onClick","handleModal","id","path","Nav","ColorMode","Message","state","name","email","text","sendMsg","bind","Nname","document","querySelector","value","Nemail","Ntext","indexOf","alert","this","setState","fetch","method","body","JSON","stringify","headers","then","res","json","console","log","type","placeholder","React","Component","Footer","Modal","event","target","checked","handleMode","handleColorMode","onChange","handleChange","App","classList","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5bf27507.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"Appmain\">\n      <div className=\"Home\">\n        <div>안녕하세요, 생각하는 대로 만들고 싶은 개발자 <span className=\"name\">김경은</span>입니다.\n        </div>\n        <div></div>\n      </div>\n    </div>\n  )\n};\n\nexport default Home;","import React from 'react';\n\nfunction Aboutme() {\n    return(\n      <div className=\"Appmain\">\n        <div className=\"aboutme\">\n          <div>About me desc....blablabla</div>\n        </div>\n      </div>\n    )\n  }\n  \n  export default Aboutme;","import React from 'react';\n\nfunction Portfolio() {\n    return(\n      <div className=\"Appmain\">\n        <div className=\"portfolio\">\n         <div>Portfolio desc....</div>\n        </div>\n      </div>\n    )\n  }\n  \n  export default Portfolio;","import React, { Fragment } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport Home from \"./Appmain/Home\"\nimport Aboutme from \"./Appmain/Aboutme\"\nimport Portfolio from \"./Appmain/Portfolio\"\n\nfunction Menu(props) {\n  return (\n    <Fragment>\n      <Router>      \n        <div className=\"Menu\">\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/Aboutme\">About me</Link>\n          </div>\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/portfolio\">Portfolio</Link>\n          </div>\n          <div className=\"Menus Setting\" onClick={props.handleModal}>\n          <span id=\"settingLetter\">Setting</span>\n          </div>\n        </div>\n          <Switch>\n            <Route path=\"/Aboutme\">\n              <Aboutme />\n            </Route>\n            <Route path=\"/portfolio\">\n              <Portfolio />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n      </Router>\n    </Fragment>\n  )\n};\n\nexport default Menu;","import React from 'react';\nimport Menu from './Menu';\n\nfunction Nav(props) {\n  return (\n    <nav className=\"Nav\">\n        <Menu handleModal={props.handleModal} ColorMode={props.ColorMode}/>\n    </nav> \n  )\n};\n\nexport default Nav;","import React from 'react';\n\nclass Message extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      name: null,\n      email: null, \n      text: null\n    } \n    this.sendMsg = this.sendMsg.bind(this)\n  }\n  sendMsg() {\n    let Nname = document.querySelector('.writer').value;\n    let Nemail = document.querySelector('.email').value;\n    let Ntext = document.querySelector('.Text').value;\n    if(Nemail.indexOf('@') === -1) {\n      alert('이메일을 확인해주세요')\n    } else {\n      this.setState({\n        name: Nname,\n        email: Nemail,\n        text: Ntext\n      })\n      document.querySelector('.writer').value = \"\";\n      document.querySelector('.email').value = \"\";\n      document.querySelector('.Text').value = \"\";\n    }\n  }\n  componentDidUpdate() {\n    fetch('http://localhost:3000/', {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    }).then(res => {return res.json()})\n    .then(res => {console.log(res)})\n  }\n  render() {\n    return (\n      <div className=\"Message\">\n        <div className=\"write\">\n          <div>메시지를 남겨주세요</div>\n          <div className=\"box1\">\n            <input type=\"text\" className=\"writer\" placeholder=\"name\"></input>\n            <input type=\"text\" className=\"email\" placeholder=\"email\"></input>\n          </div>\n            <input type=\"textarea\" className=\"Text\" placeholder=\"write a message\"></input>\n            <div><button id=\"submit\" onClick={this.sendMsg}>submit</button></div>\n        </div>\n      </div> \n    )\n  }\n};\n\nexport default Message;","import React from 'react';\n\nconst Footer = () => {\n  return(\n    <div className=\"Footer\">Thank you</div>\n  )\n}\n\nexport default Footer;","import React from 'react';\n\nclass Modal extends React.Component {\n  handleChange(event) {\n    let value = event.target.checked;\n    this.props.handleMode(value);\n    this.props.handleColorMode();\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"myModal displayMyModal\">\n          <div className=\"modal_overlay\">\n            <div className=\"modal_content\">\n              <div id=\"checkbox\">\n                  <input id=\"box\" type=\"checkbox\" onChange={this.handleChange.bind(this)}>\n                  </input>\n                  <span id=\"Colorodeon\">Colorful Mode On</span>\n              </div>\n              <span id=\"x\" onClick={this.props.handleModal}>X</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal;","import React from 'react';\nimport './style/App.css';\nimport Nav from './Nav';\nimport Message from './Message';\nimport Footer from './Footer';\nimport Modal from './components/Modal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ColorMode: false\n    }\n    this.handleMode = this.handleMode.bind(this);\n    this.handleModal = this.handleModal.bind(this);\n    this.handleColorMode = this.handleColorMode.bind(this);\n  }\n  handleMode(props) {\n    this.setState({\n      ColorMode: props\n    })\n  }\n  handleModal() {\n    document.querySelector('.myModal').classList.toggle('displayMyModal')\n  }\n  handleColorMode () {\n    document.querySelector('.Menu').classList.toggle('MenuColormode');\n    document.querySelector('.Appmain').classList.toggle('AppmainColormode');\n    document.querySelector('.Message').classList.toggle('MessageColormode');\n  }\n  render() {\n    return (\n      <div className={this.state.ColorMode ? 'App Colormode' : 'App lightmode'} >\n        <Modal handleMode={this.handleMode} handleModal={this.handleModal} handleColorMode={this.handleColorMode} />\n        <div>\n          <Nav handleModal={this.handleModal} />\n        </div>\n        <div>\n          <Message />\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { createStore } from \"redux\";\n// import { Provider } from 'react-redux';\n// import reducers from \"./reducer\";\n\n// const store = createStore(\n//   reducers,\n//   window.devToolsExtension ? window.devToolsExtension() : f => f\n// )\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}