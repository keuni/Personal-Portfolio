{"version":3,"sources":["Appmain/Home.js","Appmain/Menu1.js","Appmain/Menu2.js","Menu.js","Nav.js","Footer.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","Menu1","Menu2","Menu","props","to","onClick","handleModal","path","Nav","Footer","type","placeholder","id","Modal","event","value","target","checked","this","handleMode","onChange","handleChange","bind","React","Component","App","state","darkMode","setState","document","querySelector","classList","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAaeA,MAXf,WACE,OACE,yBAAKC,UAAU,WACb,yBAAKA,UAAU,QACb,gEACA,yECGSC,MARjB,WACI,OACE,yBAAKD,UAAU,WACb,kDCKSE,MARjB,WACI,OACE,yBAAKF,UAAU,WACb,kDCwCOG,MAlCf,SAAcC,GACZ,OACE,kBAAC,WAAD,KACE,kBAAC,IAAD,KACE,yBAAKJ,UAAU,QACb,yBAAKA,UAAU,SACb,kBAAC,IAAD,CAAMK,GAAG,KAAT,SAEF,yBAAKL,UAAU,SACb,kBAAC,IAAD,CAAMK,GAAG,UAAT,WAEF,yBAAKL,UAAU,SACb,kBAAC,IAAD,CAAMK,GAAG,UAAT,WAEF,yBAAKL,UAAU,SACb,0BAAMA,UAAU,UAAUM,QAASF,EAAMG,aAAzC,aAGF,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,WC1BCC,MARf,SAAaL,GACX,OACE,yBAAKJ,UAAU,OACX,kBAAC,EAAD,CAAMO,YAAaH,EAAMG,gBCYlBG,MAhBf,WACE,OACE,yBAAKV,UAAU,UACb,uCACA,yBAAKA,UAAU,SACb,2BAAOW,KAAK,OAAOX,UAAU,OAAOY,YAAY,oBAChD,2BAAOD,KAAK,OAAOX,UAAU,QAAQY,YAAY,UACjD,4BAAQC,GAAG,UAAX,WAEF,yBAAKb,UAAU,WCmBNc,E,kDA3Bb,WAAYV,GAAQ,uCACZA,G,yDAEKW,GACX,IAAIC,EAAQD,EAAME,OAAOC,QACzBC,KAAKf,MAAMgB,WAAWJ,K,+BAGtB,OACE,6BACE,yBAAKhB,UAAU,0BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,iBACb,yBAAKa,GAAG,YACJ,2BAAOA,GAAG,MAAMF,KAAK,WAAWU,SAAUF,KAAKG,aAAaC,KAAKJ,QAEjE,0BAAMN,GAAG,aAAT,iBAEJ,0BAAMA,GAAG,IAAIP,QAASa,KAAKf,MAAMG,aAAjC,a,GAnBMiB,IAAMC,WCsCXC,E,kDAjCb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IAEDuB,MAAQ,CACXC,UAAU,GAEZ,EAAKR,WAAa,EAAKA,WAAWG,KAAhB,gBAClB,EAAKhB,YAAc,EAAKA,YAAYgB,KAAjB,gBAPF,E,uDASRnB,GACTe,KAAKU,SAAS,CACZD,SAAUxB,M,oCAIE0B,SAASC,cAAc,YAC7BC,UAAUC,OAAO,oB,+BAGzB,OACE,yBAAKjC,UAAWmB,KAAKQ,MAAMC,SAAW,eAAiB,iBACrD,kBAAC,EAAD,CAAOR,WAAYD,KAAKC,WAAYb,YAAaY,KAAKZ,cACtD,6BACE,kBAAC,EAAD,CAAKA,YAAaY,KAAKZ,eAEzB,6BACE,kBAAC,EAAD,Y,GA3BQiB,IAAMC,WCMJS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCJNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KAEI,kBAAC,EAAD,OAGJX,SAASY,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.52286924.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home() {\n  return (\n    <div className=\"Appmain\">\n      <div className=\"Home\">\n        <div>안녕하세요,</div>\n        <div>김경은입니다.</div>\n      </div>\n    </div>\n  )\n};\n\nexport default Home;","import React from 'react';\n\nfunction Menu1() {\n    return(\n      <div className=\"Appmain\">\n        <div>Menu 1 desc....</div>\n      </div>\n    )\n  }\n  \n  export default Menu1;","import React from 'react';\n\nfunction Menu2() {\n    return(\n      <div className=\"Appmain\">\n        <div>Menu 2 desc....</div>\n      </div>\n    )\n  }\n  \n  export default Menu2;","import React, { Fragment } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport Home from \"./Appmain/Home\"\nimport Menu1 from \"./Appmain/Menu1\"\nimport Menu2 from \"./Appmain/Menu2\"\n\nfunction Menu(props) {\n  return (\n    <Fragment>\n      <Router>\n        <div className=\"Menu\">\n          <div className=\"Menus\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"Menus\">\n            <Link to=\"/menu1\">menu 1</Link>\n          </div>\n          <div className=\"Menus\">\n            <Link to=\"/menu2\">menu 2</Link>\n          </div>\n          <div className=\"Menus\">\n            <span className=\"Setting\" onClick={props.handleModal}>Setting</span>\n          </div>\n        </div>\n          <Switch>\n            <Route path=\"/menu1\">\n              <Menu1 />\n            </Route>\n            <Route path=\"/menu2\">\n              <Menu2 />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n      </Router>\n    </Fragment>\n  )\n};\n\nexport default Menu;","import React from 'react';\nimport Menu from './Menu';\n\nfunction Nav(props) {\n  return (\n    <nav className=\"Nav\">\n        <Menu handleModal={props.handleModal}/>\n    </nav> \n  )\n};\n\nexport default Nav;","import React from 'react';\n\nfunction Footer() {\n  return (\n    <div className=\"Footer\">\n      <div>Footer</div>\n      <div className=\"write\">\n        <input type=\"text\" className=\"Text\" placeholder=\"write a message\"></input>\n        <input type=\"text\" className=\"email\" placeholder=\"email\"></input>\n        <button id=\"sumbit\">submit</button>\n      </div>\n      <div className=\"read\">\n        \n      </div>\n    </div> \n  )\n};\n\nexport default Footer;","import React from 'react';\n\nclass Modal extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  handleChange(event) {\n    let value = event.target.checked;\n    this.props.handleMode(value)\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"myModal displayMyModal\">\n          <div className=\"modal_overlay\">\n            <div className=\"modal_content\">\n              <div id=\"checkbox\">\n                  <input id=\"box\" type=\"checkbox\" onChange={this.handleChange.bind(this)}>\n                  </input>\n                  <span id=\"Darmodeon\">Dark Mode On</span>\n              </div>\n              <span id=\"x\" onClick={this.props.handleModal}>x</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Modal;","import React from 'react';\nimport './style/App.css';\nimport Nav from './Nav';\nimport Footer from './Footer';\nimport Modal from './components/Modal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      darkMode: false\n    }\n    this.handleMode = this.handleMode.bind(this);\n    this.handleModal = this.handleModal.bind(this)\n  }\n  handleMode(props) {\n    this.setState({\n      darkMode: props\n    })\n  }\n  handleModal() {\n    let myModal = document.querySelector('.myModal')\n    myModal.classList.toggle('displayMyModal')\n  }\n  render() {\n    return (\n      <div className={this.state.darkMode ? 'App darkmode' : 'App lightmode'} >\n        <Modal handleMode={this.handleMode} handleModal={this.handleModal}/>\n        <div>\n          <Nav handleModal={this.handleModal}/>\n        </div>\n        <div>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { createStore } from \"redux\";\n// import { Provider } from 'react-redux';\n// import reducers from \"./reducer\";\n\n// const store = createStore(\n//   reducers,\n//   window.devToolsExtension ? window.devToolsExtension() : f => f\n// )\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}