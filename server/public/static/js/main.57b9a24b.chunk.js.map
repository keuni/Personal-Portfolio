{"version":3,"sources":["Appmain/Home.js","Appmain/Aboutme.js","Appmain/Portfolio.js","Menu.js","Nav.js","Message.js","Footer.js","components/Modal.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","ColorMode","Aboutme","Portfolio","Menu","to","class","type","onClick","handleMode","path","Nav","Message","state","name","email","text","sendMsg","bind","Nname","document","querySelector","value","Nemail","Ntext","indexOf","this","handleModal","localStorage","setItem","setState","fetch","method","body","JSON","stringify","headers","then","res","json","console","log","placeholder","id","React","Component","Footer","Modal","App","classList","toggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57b9a24b.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Home(props) {\n  return (\n    <div className=\"Home\">\n      <div>안녕하세요, 생각하는 대로 만드는 개발자가 되고 싶은 <span \n      className={props.ColorMode ? 'name nameColormode' : 'name'}>김경은</span>입니다.\n      </div>\n    </div>\n  )\n};\n\nexport default Home;","import React from 'react';\n\nfunction Aboutme(props) {\n    return(\n      <div className=\"aboutme\">\n        <div>About me desc....blablabla</div>\n      </div>\n    )\n  }\n  \n  export default Aboutme;","import React from 'react';\n\nfunction Portfolio() {\n    return(\n      <div className=\"portfolio\">\n        <div>Portfolio desc....</div>\n      </div>\n    )\n  }\n  \n  export default Portfolio;","import React, { Fragment } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n  } from \"react-router-dom\";\nimport Home from \"./Appmain/Home\"\nimport Aboutme from \"./Appmain/Aboutme\"\nimport Portfolio from \"./Appmain/Portfolio\"\n\nfunction Menu(props) {\n  return (\n    <Fragment>\n      <Router>      \n        <div className={props.ColorMode ? 'Menu MenuColormode' : 'Menu'}>\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/\">Home</Link>\n          </div>\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/Aboutme\">About me</Link>\n          </div>\n          <div className=\"Menus mainMenus\">\n            <Link to=\"/portfolio\">Portfolio</Link>\n          </div>\n          <div className=\"Menus Setting\">\n            <label class=\"switch\">\n              <input class=\"box\" type=\"checkbox\" onClick={props.handleMode}></input>\n              <span class=\"slider round\"></span>\n            </label>\n          </div>\n        </div>\n        <div className={props.ColorMode ? 'Appmain AppmainColormode' : 'Appmain'}>\n          <Switch>\n              <Route path=\"/Aboutme\">\n                <Aboutme ColorMode={props.ColorMode} />\n              </Route>\n              <Route path=\"/portfolio\">\n                <Portfolio ColorMode={props.ColorMode} />\n              </Route>\n              <Route path=\"/\">\n                <Home ColorMode={props.ColorMode} />\n              </Route>\n          </Switch>\n        </div>\n      </Router>\n    </Fragment>\n  )\n};\n\nexport default Menu;","import React from 'react';\nimport Menu from './Menu';\n\nfunction Nav(props) {\n  return (\n    <nav className=\"Nav\">\n        <Menu ColorMode={props.ColorMode} handleMode={props.handleMode} />\n    </nav> \n  )\n};\n\nexport default Nav;","import React from 'react';\n\nclass Message extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      name: null,\n      email: null, \n      text: null\n    } \n    this.sendMsg = this.sendMsg.bind(this)\n  }\n  sendMsg() {\n    let Nname = document.querySelector('.writer').value;\n    let Nemail = document.querySelector('.email').value;\n    let Ntext = document.querySelector('.Text').value;\n    if(Nemail.indexOf('@') === -1 || Nemail.indexOf('.') === -1) {\n      this.props.handleModal()\n    } else {\n      localStorage.setItem(Nname, \"메일\"+Nemail+\" 내용:\"+Ntext);\n      this.setState({\n        name: Nname,\n        email: Nemail,\n        text: Ntext\n      })\n      document.querySelector('.writer').value = \"\";\n      document.querySelector('.email').value = \"\";\n      document.querySelector('.Text').value = \"\";\n    }\n  }\n  componentDidUpdate() {\n    fetch('http://localhost:3000/', {\n      method: 'POST',\n      body: JSON.stringify(this.state),\n      headers: {\n        \"Content-Type\": \"application/json\",\n      }\n    }).then(res => {return res.json()})\n    .then(res => {console.log(res)})\n  }\n  render() {\n    return (\n      <div className={this.props.ColorMode ? 'Message MessageColormode' : 'Message'}>\n        <div className=\"write\">\n          <div>메시지를 남겨주세요</div>\n          <div className=\"box1\">\n            name : <input type=\"text\" className=\"writer\" ></input>\n            email : <input type=\"text\" className=\"email\" ></input>\n          </div>\n            <input type=\"textarea\" className=\"Text\" placeholder=\"write a message\"></input>\n            <div><button id=\"submit\" onClick={this.sendMsg}>submit</button></div>\n        </div>\n      </div> \n    )\n  }\n};\n\nexport default Message;","import React from 'react';\n\nconst Footer = (props) => {\n  return(\n    <div className={props.ColorMode ? 'Footer FooterColormode' : 'Footer'}>\n      Thank you\n    </div>\n  )\n}\n\nexport default Footer;","import React from 'react';\n\nconst Modal = (props) => {\n  return (\n    <div>\n      <div className=\"myModal displayMyModal\">\n        <div className=\"modal_overlay\" >\n          <div className=\"modal_content\">\n            <span id=\"check\">이메일을 확인해주세요 :)</span>\n            <span id=\"x\" onClick={props.handleModal}>X</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Modal;","import React from 'react';\nimport './style/App.css';\nimport Nav from './Nav';\nimport Message from './Message';\nimport Footer from './Footer';\nimport Modal from './components/Modal';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      ColorMode: false\n    }\n    this.handleMode = this.handleMode.bind(this);\n    this.handleModal = this.handleModal.bind(this);\n  }\n  handleMode() {\n    this.setState({\n      ColorMode: !this.state.ColorMode\n    })\n  }\n  handleModal() {\n    document.querySelector('.myModal').classList.toggle('displayMyModal')\n  }\n  render() {\n    return (\n      <div className={this.state.ColorMode ? 'App Colormode' : 'App'} >\n        <Modal handleModal={this.handleModal} />\n        <div>\n          <Nav handleMode={this.handleMode} ColorMode={this.state.ColorMode} />\n        </div>\n        <div>\n          <Message ColorMode={this.state.ColorMode} handleModal={this.handleModal} />\n          <Footer ColorMode={this.state.ColorMode}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { createStore } from \"redux\";\n// import { Provider } from 'react-redux';\n// import reducers from \"./reducer\";\n\n// const store = createStore(\n//   reducers,\n//   window.devToolsExtension ? window.devToolsExtension() : f => f\n// )\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <Provider store={store}> */}\n      <App />\n    {/* </Provider> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}